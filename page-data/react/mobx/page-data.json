{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/react/mobx/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Southkyu.io","author":"[Your Name]","siteUrl":"https://github.com/KimNamKyu/KimNamKyu.github.io","comment":{"disqusShortName":"","utterances":"KimNamKyu/KimNamKyu.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"915c4070-226c-5c78-bc25-266b6090c7fd","excerpt":"mobx-start reject 하고싶지않으때 사용할수 있는 패키지 데코레이터 테스트용 dependency 주입\n 타입스크립트 사용시 tsconfig파일에서  true로 설정하면 babel설정없이 사용가능다. @observable 관찰이 가능한 대상 observable() 데코레이터 없이 사용하는 방식 @없이, 함수처러 사용해서 리턴한 객체를 사용 @observable…","html":"<h1 id=\"mobx-start\" style=\"position:relative;\"><a href=\"#mobx-start\" aria-label=\"mobx start permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>mobx-start</h1>\n<p>reject 하고싶지않으때 사용할수 있는 패키지</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">  <span class=\"token function\">npm</span> i customize-cra react-app-rewired -D</code></pre></div>\n<p>데코레이터 테스트용 dependency 주입\n<code class=\"language-text\">npm i autobind-decorator</code></p>\n<p>타입스크립트 사용시 tsconfig파일에서 <code class=\"language-text\">experimentalDecorators</code> true로 설정하면 babel설정없이 사용가능다.</p>\n<h2 id=\"observable-관찰이-가능한-대상\" style=\"position:relative;\"><a href=\"#observable-%EA%B4%80%EC%B0%B0%EC%9D%B4-%EA%B0%80%EB%8A%A5%ED%95%9C-%EB%8C%80%EC%83%81\" aria-label=\"observable 관찰이 가능한 대상 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@observable 관찰이 가능한 대상</h2>\n<blockquote>\n<ul>\n<li>observable(<code class=\"language-text\">&lt;value></code>)\n<ul>\n<li>데코레이터 없이 사용하는 방식</li>\n<li>@없이, 함수처러 사용해서 리턴한 객체를 사용</li>\n</ul>\n</li>\n<li>@observable &#x3C;클래스의 프로퍼티>\n<ul>\n<li>데코레이터로 사용하는 법</li>\n<li>클래스 내부에 프로퍼티 앞에 붙여서 사용</li>\n<li>한 클래스 안에 여러개의 @observable존재</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"observable방식과-observable방식\" style=\"position:relative;\"><a href=\"#observable%EB%B0%A9%EC%8B%9D%EA%B3%BC-observable%EB%B0%A9%EC%8B%9D\" aria-label=\"observable방식과 observable방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>observable방식과 @observable방식</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// observable방식과\nconst isLogin = observable&lt;any>(true)\nconst person = observable&lt;any>({\n    name: 'mark',\n    age: 29,\n  })\n\n// @observable방식과\nclass PersonStore {\n  @observable\n  name = \"Mark\";\n\n  @observable\n  age = 39;\n  constructor() {\n    makeObservable(this);\n  }\n}\n\nconst personStore = new PersonStore();\n\nautorun(() => {\n  console.log(isLogin.get());\n  console.log(person.name);\n  console.log(personStore.age);\n});</code></pre></div>\n<h2 id=\"observer-by-mobx-react\" style=\"position:relative;\"><a href=\"#observer-by-mobx-react\" aria-label=\"observer by mobx react permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@observer (by mobx-react)</h2>\n<p>의존성 주입 <code class=\"language-text\">npm i mobx-react</code></p>\n<blockquote>\n<ul>\n<li>observer(&#x3C;컴포넌트>)\n<ul>\n<li>데코레이터 없이 사용하는 방식</li>\n<li>함수 컴포넌트에 사용</li>\n</ul>\n</li>\n<li>&#x3C;컴포넌트 클래스> 에 @observer 달아서 처리\n<ul>\n<li>클래스 컴포넌트에 사용</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>observer들이 변경되었을때 observer처리된 컴포넌트들이 다시 랜더링 된다.</p>\n<p>context 사용한 props 주입</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">//context</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> PersonContext <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">createContext</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> age<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> PersonContext</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// store</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> makeObservable<span class=\"token punctuation\">,</span> observable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'mobx'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonStore</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">observable</span></span>\n  name <span class=\"token operator\">=</span> <span class=\"token string\">'Mark'</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">observable</span></span>\n  age <span class=\"token operator\">=</span> <span class=\"token number\">39</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">makeObservable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">plus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// function component</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    personStore<span class=\"token punctuation\">.</span><span class=\"token function\">plus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> personStore <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>PersonContext<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>header className<span class=\"token operator\">=</span><span class=\"token string\">\"App-header\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Button <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>personStore<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>click<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>plus<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>header<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// class component</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">observer</span></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span>Component <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> contextType <span class=\"token operator\">=</span> PersonContext\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">autobind</span></span>\n  <span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> personStore <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context\n    personStore<span class=\"token punctuation\">.</span><span class=\"token function\">plus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> personStore <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>header className<span class=\"token operator\">=</span><span class=\"token string\">\"App-header\"</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Button <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>personStore<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>plus<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>header<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>mobx-react에서 제공하는 provider를사용한 방법해보자!</p>\n<h2 id=\"computed-by-mobx\" style=\"position:relative;\"><a href=\"#computed-by-mobx\" aria-label=\"computed by mobx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>computed (by mobx)</h2>\n<img src=\"../assets/../../../assets/computed.png\">\n먼가 변경이 일어났을때 observable state를 바로 render해서 사용하는 것이아니고\ncomputed라고 하는 렌더에 변경을 일으키는 항목으로 notify 시키고 컴포넌트에서는 computed의 상태만 변경되었을때 렌더를 다시하는 방향으로 observable의 모든 state변경에 반응하지 않고 computed상태를 중간단계를 두어 처리하는 일종의 캐싱형태의 단계이다.\n<blockquote>\n<ul>\n<li>computed(내부에서 observable을 사용하는 함수);\n<ul>\n<li>데코레이터 없이 사용하는 방식</li>\n</ul>\n</li>\n<li>&#x3C;observable클래스>dml getter에 @computed 달아서 처리\n<ul>\n<li>스토어에 사용</li>\n<li>getter에만 붙일수 있다.</li>\n</ul>\n</li>\n<li>함수가 아니라 리액티브 하다는 것에 주목</li>\n<li>실제 컴포넌트에서 사요하는 (게터)값들에 달아서 사용하면 최소범위로 변경할수 있기 때문에 유용.\n<ul>\n<li>40살이 넘었을때만 나이를 올리면 40살 이하일때는 재랜더링 대상이 아닌 것과 같은 경우</li>\n<li>내부적으로 고도의 최적화 => 어떻게?\n<ul>\n<li>매번 재계산을 하지 않는다.</li>\n<li>계산에 사용할 observable 값이 변경되지 않으면 재실행하지 않음.</li>\n<li>다른 computed 또는 reaction에 의해 호출되지 않으면 재실행하지 않음</li>\n<li>observable이 변했는데 computed가 변하지 않을때 렌더하지 않음</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>","frontmatter":{"title":"[mobx]mobx란","date":"April 08, 2022"}}},"pageContext":{"slug":"/react/mobx/","previous":{"fields":{"slug":"/javascript/[JS]chapter1/"},"frontmatter":{"title":"[JS]코어자바스크립트"}},"next":null}},
    "staticQueryHashes": ["2486386679","3128451518"]}