{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/function/","result":{"data":{"site":{"siteMetadata":{"title":"Southky.io","author":"KimNamkyu","siteUrl":"https://kimnamkyu.github.io","comment":{"disqusShortName":"","utterances":""},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"81ae08c5-c0dd-5010-a2e5-2354438d8996","excerpt":"함수 호이스팅\n3가지의 함수 정의 방식 - 함수선언문, 함수표현식, Function 생성자 함수! 3가지 함수정의 방식은 동작 방식에 차이가 있다. 함수선언문방식 위 코드를 보면 함수 선언문으로 함수가 정의되기 이전에 함수 호출이 가능하다. 함수 선언문의 경우, 함수 선언의 위치와는 상관없이 코드 내 어느 곳에서든지 호출이 가능한데 이것을 함수 호이스팅(Function Hoisting)이라 한다. 자바스크립트는 ES6의 let, const를 포함하여 모든 선언(var, let, const…","html":"<ol>\n<li>함수 호이스팅\n3가지의 함수 정의 방식 - 함수선언문, 함수표현식, Function 생성자 함수!</li>\n</ol>\n<p>3가지 함수정의 방식은 동작 방식에 차이가 있다.</p>\n<h3 id=\"함수선언문방식\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EC%84%A0%EC%96%B8%EB%AC%B8%EB%B0%A9%EC%8B%9D\" aria-label=\"함수선언문방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수선언문방식</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> number <span class=\"token operator\">*</span> number<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드를 보면 함수 선언문으로 함수가 정의되기 이전에 함수 호출이 가능하다. 함수 선언문의 경우, 함수 선언의 위치와는 상관없이 코드 내 어느 곳에서든지 호출이 가능한데 이것을 함수 호이스팅(Function Hoisting)이라 한다.</p>\n<p>자바스크립트는 ES6의 let, const를 포함하여 모든 선언(var, let, const, function, function*, class)을 호이스팅(Hoisting)한다.</p>\n<p>호이스팅이란 var 선언문이나 function 선언문 등 모든 선언문이 해당 Scope의 선두로 옮겨진 것처럼 동작하는 특성을 말한다. 즉, 자바스크립트는 모든 선언문(var, let, const, function, function*, class)이 선언되기 이전에 참조 가능하다.</p>\n<p>함수 선언, 초기화, 할당이 한번에 이루어진다. 그렇기 때문에 함수 선언의 위치와는 상관없이 소스 내 어느 곳에서든지 호출이 가능하다.</p>","frontmatter":{"title":"함수","date":"May 25, 2021"}}},"pageContext":{"slug":"/javascript/function/","previous":{"fields":{"slug":"/javascript/object/"},"frontmatter":{"title":"객체"}},"next":null}},"staticQueryHashes":["2486386679","3128451518"]}